digraph "CFG for 'base64_encode_fast' function" {
	label="CFG for 'base64_encode_fast' function";

	Node0x555ee4ed6b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%3:\l  %4 = alloca i8*, align 8\l  %5 = alloca i64, align 8\l  %6 = alloca i8*, align 8\l  call void @__sanitizer_cov_trace_pc_guard(i32* getelementptr inbounds ([3 x\l... i32], [3 x i32]* @__sancov_gen_.12, i32 0, i32 0)) #14, !dbg !727\l  store i8* %0, i8** %4, align 8\l  call void @llvm.dbg.declare(metadata i8** %4, metadata !728, metadata\l... !DIExpression()), !dbg !729\l  store i64 %1, i64* %5, align 8\l  call void @llvm.dbg.declare(metadata i64* %5, metadata !730, metadata\l... !DIExpression()), !dbg !731\l  store i8* %2, i8** %6, align 8\l  call void @llvm.dbg.declare(metadata i8** %6, metadata !732, metadata\l... !DIExpression()), !dbg !733\l  br label %7, !dbg !734\l}"];
	Node0x555ee4ed6b40 -> Node0x555ee4ed6e70;
	Node0x555ee4ed6e70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%7:\l7:                                                \l  %8 = load i64, i64* %5, align 8, !dbg !735\l  %9 = icmp ne i64 %8, 0, !dbg !734\l  br i1 %9, label %10, label %75, !dbg !734\l|{<s0>T|<s1>F}}"];
	Node0x555ee4ed6e70:s0 -> Node0x555ee4ed6ec0;
	Node0x555ee4ed6e70:s1 -> Node0x555ee4ed6f10;
	Node0x555ee4ed6ec0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%10:\l10:                                               \l  call void @__sanitizer_cov_trace_pc_guard(i32* inttoptr (i64 add (i64\l... ptrtoint ([3 x i32]* @__sancov_gen_.12 to i64), i64 4) to i32*)) #14, !dbg\l... !736\l  %11 = load i8*, i8** %4, align 8, !dbg !736\l  %12 = getelementptr inbounds i8, i8* %11, i64 0, !dbg !736\l  %13 = load i8, i8* %12, align 1, !dbg !736\l  %14 = call zeroext i8 @to_uchar(i8 signext %13), !dbg !738\l  %15 = zext i8 %14 to i32, !dbg !738\l  %16 = ashr i32 %15, 2, !dbg !739\l  %17 = sext i32 %16 to i64, !dbg !740\l  %18 = getelementptr inbounds [64 x i8], [64 x i8]* getelementptr inbounds (\{\l... [64 x i8], [32 x i8] \}, \{ [64 x i8], [32 x i8] \}* @b64c, i32 0, i32 0), i64\l... 0, i64 %17, !dbg !740\l  %19 = load i8, i8* %18, align 1, !dbg !740\l  %20 = load i8*, i8** %6, align 8, !dbg !741\l  %21 = getelementptr inbounds i8, i8* %20, i32 1, !dbg !741\l  store i8* %21, i8** %6, align 8, !dbg !741\l  store i8 %19, i8* %20, align 1, !dbg !742\l  %22 = load i8*, i8** %4, align 8, !dbg !743\l  %23 = getelementptr inbounds i8, i8* %22, i64 0, !dbg !743\l  %24 = load i8, i8* %23, align 1, !dbg !743\l  %25 = call zeroext i8 @to_uchar(i8 signext %24), !dbg !744\l  %26 = zext i8 %25 to i32, !dbg !744\l  %27 = shl i32 %26, 4, !dbg !745\l  %28 = load i8*, i8** %4, align 8, !dbg !746\l  %29 = getelementptr inbounds i8, i8* %28, i64 1, !dbg !746\l  %30 = load i8, i8* %29, align 1, !dbg !746\l  %31 = call zeroext i8 @to_uchar(i8 signext %30), !dbg !747\l  %32 = zext i8 %31 to i32, !dbg !747\l  %33 = ashr i32 %32, 4, !dbg !748\l  %34 = add nsw i32 %27, %33, !dbg !749\l  %35 = and i32 %34, 63, !dbg !750\l  %36 = sext i32 %35 to i64, !dbg !751\l  %37 = getelementptr inbounds [64 x i8], [64 x i8]* getelementptr inbounds (\{\l... [64 x i8], [32 x i8] \}, \{ [64 x i8], [32 x i8] \}* @b64c, i32 0, i32 0), i64\l... 0, i64 %36, !dbg !751\l  %38 = load i8, i8* %37, align 1, !dbg !751\l  %39 = load i8*, i8** %6, align 8, !dbg !752\l  %40 = getelementptr inbounds i8, i8* %39, i32 1, !dbg !752\l  store i8* %40, i8** %6, align 8, !dbg !752\l  store i8 %38, i8* %39, align 1, !dbg !753\l  %41 = load i8*, i8** %4, align 8, !dbg !754\l  %42 = getelementptr inbounds i8, i8* %41, i64 1, !dbg !754\l  %43 = load i8, i8* %42, align 1, !dbg !754\l  %44 = call zeroext i8 @to_uchar(i8 signext %43), !dbg !755\l  %45 = zext i8 %44 to i32, !dbg !755\l  %46 = shl i32 %45, 2, !dbg !756\l  %47 = load i8*, i8** %4, align 8, !dbg !757\l  %48 = getelementptr inbounds i8, i8* %47, i64 2, !dbg !757\l  %49 = load i8, i8* %48, align 1, !dbg !757\l  %50 = call zeroext i8 @to_uchar(i8 signext %49), !dbg !758\l  %51 = zext i8 %50 to i32, !dbg !758\l  %52 = ashr i32 %51, 6, !dbg !759\l  %53 = add nsw i32 %46, %52, !dbg !760\l  %54 = and i32 %53, 63, !dbg !761\l  %55 = sext i32 %54 to i64, !dbg !762\l  %56 = getelementptr inbounds [64 x i8], [64 x i8]* getelementptr inbounds (\{\l... [64 x i8], [32 x i8] \}, \{ [64 x i8], [32 x i8] \}* @b64c, i32 0, i32 0), i64\l... 0, i64 %55, !dbg !762\l  %57 = load i8, i8* %56, align 1, !dbg !762\l  %58 = load i8*, i8** %6, align 8, !dbg !763\l  %59 = getelementptr inbounds i8, i8* %58, i32 1, !dbg !763\l  store i8* %59, i8** %6, align 8, !dbg !763\l  store i8 %57, i8* %58, align 1, !dbg !764\l  %60 = load i8*, i8** %4, align 8, !dbg !765\l  %61 = getelementptr inbounds i8, i8* %60, i64 2, !dbg !765\l  %62 = load i8, i8* %61, align 1, !dbg !765\l  %63 = call zeroext i8 @to_uchar(i8 signext %62), !dbg !766\l  %64 = zext i8 %63 to i32, !dbg !766\l  %65 = and i32 %64, 63, !dbg !767\l  %66 = sext i32 %65 to i64, !dbg !768\l  %67 = getelementptr inbounds [64 x i8], [64 x i8]* getelementptr inbounds (\{\l... [64 x i8], [32 x i8] \}, \{ [64 x i8], [32 x i8] \}* @b64c, i32 0, i32 0), i64\l... 0, i64 %66, !dbg !768\l  %68 = load i8, i8* %67, align 1, !dbg !768\l  %69 = load i8*, i8** %6, align 8, !dbg !769\l  %70 = getelementptr inbounds i8, i8* %69, i32 1, !dbg !769\l  store i8* %70, i8** %6, align 8, !dbg !769\l  store i8 %68, i8* %69, align 1, !dbg !770\l  %71 = load i64, i64* %5, align 8, !dbg !771\l  %72 = sub i64 %71, 3, !dbg !771\l  store i64 %72, i64* %5, align 8, !dbg !771\l  %73 = load i8*, i8** %4, align 8, !dbg !772\l  %74 = getelementptr inbounds i8, i8* %73, i64 3, !dbg !772\l  store i8* %74, i8** %4, align 8, !dbg !772\l  br label %7, !dbg !734, !llvm.loop !773\l}"];
	Node0x555ee4ed6ec0 -> Node0x555ee4ed6e70;
	Node0x555ee4ed6f10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%75:\l75:                                               \l  call void @__sanitizer_cov_trace_pc_guard(i32* inttoptr (i64 add (i64\l... ptrtoint ([3 x i32]* @__sancov_gen_.12 to i64), i64 8) to i32*)) #14, !dbg\l... !776\l  ret void, !dbg !776\l}"];
}
